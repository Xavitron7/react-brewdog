{"version":3,"sources":["components/BeerCard.js","App.js","reportWebVitals.js","index.js"],"names":["BeerCard","beer","Card","Header","className","name","Body","Subtitle","tagline","Text","first_brewed","description","abv","ListGroup","food_pairing","map","pairing","Item","Math","random","App","useState","allBeers","setAllBeers","displayBeers","setDisplayBeers","useEffect","a","fetch","mode","beers","json","beersJSON","callAPI","Container","fluid","Row","Form","onSubmit","event","preventDefault","filteredBeers","beerSelection","document","querySelector","value","minABVSelection","maxABVSelection","filter","console","log","alert","Group","controlId","Label","Select","Control","type","placeholder","step","ButtonGroup","Button","onClick","floor","length","s","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c356f40.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport \"./BeerCard.css\"\r\n\r\nexport const BeerCard = ({beer}) => {\r\n    return (\r\n        <Card>\r\n            <Card.Header className=\"py-2 bg-dark text-light fs-5 text-center\">{beer.name}</Card.Header>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-muted\">{beer.tagline}</Card.Subtitle>\r\n                <Card.Text>First Brewed: {beer.first_brewed}</Card.Text>\r\n                <Card.Text>Description: {beer.description}</Card.Text>\r\n                <Card.Text>ABV: {beer.abv}%</Card.Text>\r\n                <ListGroup className=\"list-group-flush\">\r\n                    <Card.Text>Food Pairing:</Card.Text>\r\n                    {beer.food_pairing.map(pairing => <ListGroup.Item key={Math.random() * 100000}>{pairing}</ListGroup.Item>)}\r\n                </ListGroup> \r\n            </Card.Body>\r\n                       \r\n\r\n        </Card>\r\n        \r\n    )\r\n\r\n}\r\n","import {useState, useEffect} from \"react\";\nimport {BeerCard} from \"./components/BeerCard\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n\nfunction App() {\n\n  const [allBeers, setAllBeers] = useState([]);\n  const [displayBeers, setDisplayBeers] = useState([]);\n  const [beerName, setBeerName] = useState(\"\");\n\nuseEffect(() => {\n  const callAPI = async () => {\n    const beers = await fetch(\"https://api.punkapi.com/v2/beers\", {mode:\"cors\"});\n    const beersJSON = await beers.json();\n    setAllBeers(beersJSON);\n    setDisplayBeers(beersJSON); \n  }\n\n  callAPI();\n\n}, [])\n\nfunction displayRandomBeer() {\n  //Select a random beer index from \"All Beers\" array using that math.random range calculation. Then use that value as an argument for setDisplay beers.\n\n  setDisplayBeers([allBeers[Math.floor(Math.random() * ((allBeers.length - 1) - 0 + 1)) + 0]]);\n  \n}\n\nfunction displayAllBeers() {\n  setDisplayBeers([...allBeers])\n}\n\n\nfunction handleSubmit(event) {\n\n  event.preventDefault();\n  // Function needs to take the information from the input fields and use that information in a lookup vs the displayBeers array\n  const beerSelection = document.querySelector(\"#beerSelect\").value;\n  const minABVSelection = document.querySelector(\"#minABVInput\").value === \"\" ? null : document.querySelector(\"#minABVInput\").value;\n  const maxABVSelection = document.querySelector(\"#maxABVInput\").value === \"\" ? null : document.querySelector(\"#maxABVInput\").value;\n  let filteredBeers;\n  \n  //First thing to do is make sure max abv is larger than or equal to min abv\n\n  //Requirements: If beer selection = any, ignore beer as a filter criteria. If food pairing = any, ignore food pairing as a criteria. Also need a way to deal with empty strings in the abv selections.\n\n  //If statement checks that the max abv is bigger than or equal to the min abv, and that the values are truthy (no empty strings or null / undef values)\n\n  if (minABVSelection && maxABVSelection) {\n\n    beerSelection === \"Any\" ? \n    filteredBeers = allBeers.filter(beer => beer.abv >= minABVSelection && beer.abv <=maxABVSelection) : \n    filteredBeers = allBeers.filter(beer => beer.name === beerSelection && beer.abv >= minABVSelection && beer.abv <=maxABVSelection);\n\n    setDisplayBeers([...filteredBeers]);\n    console.log(minABVSelection, maxABVSelection)\n    console.log(displayBeers)\n\n    //Want to: locate the object at a position in the array, access the food pairing array, loop through each object in that array to see if it includes the food pairing\n  } \n\n  else if (!minABVSelection && !maxABVSelection) {\n    beerSelection === \"Any\" ? filteredBeers = allBeers : filteredBeers = allBeers.filter(beer => beer.name === beerSelection);\n\n    setDisplayBeers([...filteredBeers])\n\n    console.log(minABVSelection, maxABVSelection);\n    console.log(displayBeers)\n\n  }\n\n  else {\n    \n      alert(\"Check the entries in the selection fields\")\n  }\n\n}\n  return (\n        \n      <Container fluid className=\"bg-light\">\n        <Row className=\"bg-dark\">\n          <h1 className=\"text-light text-center\">Brewdog Beer Picker</h1>\n        </Row>\n        <Container>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"beerSelect\">\n            <Form.Label>Beer:</Form.Label>\n            <Form.Select aria-label=\"Select a beer\" >\n              <option value=\"Any\">Any</option>\n              {allBeers.map(beer => {return <option value={beer.name}>{beer.name}</option>})} \n            </Form.Select>\n          </Form.Group>\n\n          <Form.Group controlId=\"minABVInput\">\n            <Form.Label>Min ABV:</Form.Label>\n            <Form.Control type=\"number\" placeholder=\"Min ABV\" step=\"0.1\" />          \n          </Form.Group>\n\n          <Form.Group controlId=\"maxABVInput\">\n            <Form.Label>Max ABV:</Form.Label>\n            <Form.Control type=\"number\" placeholder=\"Max ABV\" step=\"0.1\" />\n          </Form.Group>\n\n          <ButtonGroup aria-label=\"Form button group\" className=\"my-3\">\n            <Button type=\"reset\" className=\"btn btn-danger\">Clear Selections</Button>\n            <Button type=\"submit\" className=\"btn btn-success\">Submit</Button>\n            <Button type=\"button\" onClick={displayRandomBeer}>Randomise</Button>\n            <Button type=\"button\" onClick={displayAllBeers}>Display All Beers</Button>\n          </ButtonGroup>\n\n        </Form>\n        \n        <Container className=\"my-2\">\n          <Row s={1} lg={2} className=\"gy-1 gx-0\">\n          {displayBeers.map(beer => {\n            return <BeerCard beer={beer} key={Math.random() * 10000}/>\n          })}\n\n          </Row>\n         \n        </Container>\n\n        </Container>\n      \n      </Container>\n    \n  );\n}\n\nexport default App;\n\n\n//Problem faced: Beer could only be changed once without using the \"display all beers function\". I.e. you'd select a beer then couldn't choose another. This was because the code was both displaying AND filtering on the beers in the displaybeers array. Changing the code so that it filtered on \"allbeers\" then updated the \"displaybeers\" array fixed the problem. Also solidified the fact that the displaybeers array shouldn't be filtered on and just used to store filtering outputs.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}